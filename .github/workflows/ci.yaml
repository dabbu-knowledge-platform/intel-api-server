name: CI

# Triggers the workflow on push or pull request events for any branch that has
# this file
on: [push, pull_request]

# This workflow has only two jobs - testing and building (combined into
# one) and uploading the release to github
jobs:
  ci:
    name: Test and build on node ${{ matrix.node_version }}
    # Run the job on an instance of Ubuntu
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Run on node 14
        node_version: ['14.x']
    steps:
      # `git clone` the repo
      - name: Check out repo
        uses: actions/checkout@v1
      # Setup the specified version of node
      - name: Setup node ${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node_version }}
      # Install dependencies and run the `yarn ci` command
      - name: Test and build
        run: |
          yarn
          yarn ci
      # Save the built binaries
      - name: Saving alpine binary
        uses: actions/upload-artifact@v2
        with:
          name: intel-api-server-alpine
          path: dist/binaries/intel-api-server-alpine
      - name: Saving linux binary
        uses: actions/upload-artifact@v2
        with:
          name: intel-api-server-linux
          path: dist/binaries/intel-api-server-linux
      - name: Saving macos binary
        uses: actions/upload-artifact@v2
        with:
          name: intel-api-server-macos
          path: dist/binaries/intel-api-server-macos
      - name: Saving windows binary
        uses: actions/upload-artifact@v2
        with:
          name: intel-api-server-win.exe
          path: dist/binaries/intel-api-server-win.exe
  # Upload the release
  release:
    name: Upload release
    # Make sure the ci task has succeeded before uploading a release
    needs: [ci]
    runs-on: ubuntu-latest
    steps:
      # `git clone` the repo
      - name: Check out repo
        uses: actions/checkout@v1
      # Download built binaries
      - name: Downloading alpine binary
        uses: actions/download-artifact@v2
        with:
          name: intel-api-server-alpine
      - name: Downloading linux binary
        uses: actions/download-artifact@v2
        with:
          name: intel-api-server-linux
      - name: Downloading macos binary
        uses: actions/download-artifact@v2
        with:
          name: intel-api-server-macos
      - name: Downloading windows binary
        uses: actions/download-artifact@v2
        with:
          name: intel-api-server-win.exe
      # Check if the version is different from the last uploaded release
      - name: Check version
        run: |
          revision=`git rev-list --tags --max-count=1`
          version_name=`cat version`
          previous_version_name=`git describe --tags --abbrev=0`

          echo "Uploading version: $version_name"
          echo "Previous version: $previous_version_name"

          echo "::set-output name=version::$version_name"
          echo "::set-output name=previous_version::$previous_version_name"
        id: check-version
      - name: Create release
        # Run it only if the version has been changed
        if: ${{ steps.check-version.outputs.version != steps.check-version.outputs.previous_version && github.ref == 'refs/heads/develop' }}
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          tag_name: ${{ steps.check-version.outputs.version }}
          prerelease: ${{ contains(steps.check-version.outputs.version, '-') }}
          name: Dabbu Intel API Server ${{ steps.check-version.outputs.version }}
          files: |
            intel-api-server-alpine
            intel-api-server-linux
            intel-api-server-macos
            intel-api-server-win.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: dabbu-knowledge-platform/intel-api-server
